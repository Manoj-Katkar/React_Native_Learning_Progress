To create the react native project with the CLI : 
use command : npx @react-native-community/cli init "My-New-App"

// To Avoid the issues for running the latest version app (create the app of the specific version using he below command 

use command : npx react-native@0.72.7 init NameOfApp --version 0.72.7


TO start the expo application : npx react-native run-android

ShortCuts : 
          1) To create the React-Native Components : rnfe 
          2) To open the new terminal In the react native application : ctrl + shift + below ESC 
          3) to reload the vs code : ctrl + p then type >Reload Window

Note For Implementing the Navigation : 
                            i) I have cloned the one dummy-project from Rohit git repository (That is present inside the manoj react folder)
                            ii) then make sure install the react-native/codegen library  // npm i @react-native/codegen
                            iii) then I have to delete the node modules and package.lock.json 
                            iv) then do pnpm i or npm i use anyone out of two 
                            v) then I have to clear the cache using the below command 
                                      1)cd android ;./gradlew clean;cd ..          (this are total 3 command you can type it at once only)
                            vi) also do add few line of code in MainActivity.kt add below two lines 

                                 in line no 2 ) import android.os.Bundle;

                                 in line no 15)   override fun onCreate(savedInstanceState: Bundle?) = super.onCreate(null)


                            vii) then I have to run the app using the : npx react-native run-android         


// few Errors Occurs While implementing the project 

        Error : 
                  > Task :app:configureCMakeDebug[arm64-v8a] FAILED
                  36 actionable tasks: 26 executed, 10 up-to-date
                  
              FAILURE: Build failed with an exception.

              * Where:
              Settings file 'D:\Manoj_React\QuickNest\android\settings.gradle' line: 2

              * What went wrong:
              Error resolving plugin [id: 'com.facebook.react.settings']
              > Included build 'D:\Manoj_React\QuickNest\node_modules\@react-native\gradle-plugin' does not exist.

How to resolve the above error : 



<Stack.Navigator 
      screenOptions={{headerShown:false}}
      >
        <Stack.Screen name='DrawerNav' component={DrawerNav} />
      </Stack.Navigator>



























//Differance between the npm and npx and pnpm  

(Note : pnpm will not install the dependency library for particular dependency again and again either it will just link those dependency libraries so it will become faster)


| Command | Description                           | Usage Example                       | Key Difference                                             |
|---------|---------------------------------------|-------------------------------------|------------------------------------------------------------|
| npm     | Node package manager. Installs,       | `npm install <package>`             | Manages dependencies, installs packages locally/globally.  |
|         | manages, and runs JavaScript packages. | `npm run <script>`                  |                                                            |
| npx     | Package runner (comes with npm).      | `npx create-react-app my-app`       | Runs packages without installing them globally.            |
|         | Executes binaries from npm packages.  | `npx eslint .`                      | Temporary execution, useful for one-time commands.         |
| pnpm    | Faster, disk-efficient package manager.| `pnpm install <package>`           | Installs dependencies more efficiently (uses symlinks).   |
|         | Uses a shared global store for deps.  | `pnpm run <script>`                 | Reduces disk usage and speeds up installs.                 |






//I have to try the code of the below concepts how it works in the React-Native

i)View , Text ,



//====================================================================================Date : 04/11/2024 (Monday) =========================================================


2) Image component In React :
			it takes one props that is source but it always accept the number that will point towards that Image but in src in react-dom it will accept the direct path 

Note : When we are passing the direct url then we have to convert that link into the object and for that object give key as the uri

	Example : <Image source={{uri : "https://picsum.photos/id/237/200/300"}} />

3)Background Image : to setup the background Images react native inbuild gives one component that is : 

	Example :       {/* How to setup the background Image in React native  */}
      			<ImageBackground source={logoImage} style={{flex:1}}>
         			<Text>Image Text present above the background Image </Text>        
      			</ImageBackground>


4) flex: 1: This means that the component should take up all available space in the direction defined by its parent container (usually vertically in a column layout). If multiple components have flex: 1, they will share the space equally.






//============================================================== Differance between the web and React-Native ======================================

---------------Web (React-Dom ) -------------------------------||||||

i)In web if we add the to much text it will automatically give 		
the scroll bar with that we can scroll the content  





 -------------------------Mobile (React Native )----------------------------------


i) In React Native it will not give the automatic scroll view component when we click 
and try to drag down 

ii)In react Native we can achive it using the ScrollView Component that is present in the react-native 

Note :In react native for the scrollable component I have to use the ScrollView Component 




//--------------------------------------------  Button Component In React Native --------------------------


Note :i )In react Native the Button Component have the platform specific rendering for IOS and Android 
      ii) In react native there no concept for the buttons like innerText or innerHtml 
      iii) In react Native Button component is like the self closing tag 

		Example :         <Button
        				 title='Click Me'
         				onPress={handleClick}
         				ref={ref}
      				   />




//=============================================All Events Comparision With web and Mobile ======================================

// Event Type          | React Native Event                 | React DOM Event                      | Explanation                                     |
// ---------------------|------------------------------------|--------------------------------------|-------------------------------------------------
// onClick              | onPress                            | onClick                              | Triggered when the user presses or clicks.     //
// onDoubleClick        | onPress with onPressOut           | onDoubleClick                        | Triggered on a double-click.                    //
// onMouseEnter         | Not directly available             | onMouseEnter                         | Triggered when the mouse enters an element.    //
// onMouseLeave         | Not directly available             | onMouseLeave                         | Triggered when the mouse leaves an element.     //
// onFocus              | onFocus                            | onFocus                              | Triggered when an element receives focus.       //
// onBlur               | onBlur                             | onBlur                               | Triggered when an element loses focus.          //
// onChange             | onChangeText (for TextInput)      | onChange                             | Triggered when the value of an input changes.   //
// onKeyPress           | onKeyPress (for TextInput)        | onKeyPress                           | Triggered when a key is pressed.                //
// onSubmit             | onSubmitEditing (for TextInput)   | onSubmit (for forms)                | Triggered when a form is submitted.             //
// onScroll             | onScroll                           | onScroll                             | Triggered when the user scrolls an element.     //
// onTouchStart         | onTouchStart                       | Not directly available               | Triggered when a touch interaction starts.      //
// onTouchEnd           | onTouchEnd                         | Not directly available               | Triggered when a touch interaction ends.        //
// onLongPress          | onLongPress                        | Not directly available               | Triggered when a press is held for a long time. //
// onLayout             | onLayout                           | Not directly available               | Triggered when the layout of a component changes.//
// onAnimationEnd       | Not directly available             | onAnimationEnd                       | Triggered when a CSS animation ends.             //




//------------------------------------------------------------------- Pressable Component In React ------------------------------------------ 

When to use it : ( when we want to press the action based on the some elements like Text or Images then I have to use It )

Use the `Pressable` component when you need to handle multiple touch states (like `onPress`, `onPressIn`, `onPressOut`, and `onLongPress`) and when you want to customize the styling or behavior of touch interactions in a flexible way. Itâ€™s ideal for creating complex interactive components with better performance and accessibility.

Note : i)Pressable is a Wrapper Component that detects various stages of press interactions on its defined children 
       ii)https://reactnative.dev/docs/pressable (refer the docs for more details) 
       iii) `onPressOut`, and `onLongPress` This will get triggred after the 500 miliseconds 





//------------------------------------------------------------- How Modals Works In React Native ------------------------------------------------


Modals : i) Modal is a screen that overlays the app content to provide important information or prompt the user for a decision 
		
	ii) they are purposely interruptive 

	iii) Modal act as the container so inside that we can create the UI that we want to show to the user for some purpose  


Example of Modal : 
    {/*  Creating the modal */}

    <Modal visible={isVisible}                                 //this will keep track whether to display the modal or not 
    
            onRequestClose={() => {setIsVisible(false)}}       //when the user will press back button it will work 
            // animationType='slide'                               //this modal will come from the bottom in slide fashion 
            animationType='fade'                                 //it is like open with some cool effect fadeIn and fadeOut 
            // presentationStyle='pageSheet'
            presentationStyle='fullScreen'                       //it will maintain the apperance to display 
    >
        <View style={{flex:1 , backgroundColor:"lightblue"  , padding:60}}>
          <Text>Modal Content</Text>

          <Button title='Close' 
          onPress={handlePress}
          color="midnightblue"
          />
        </View>

    </Modal>



Note : i)Modal take prop that is visible which will decide whether that modal will be visible or not 
	ii)and if I Want to give the functionality like when the user will click on the back button on their phone then also the modal should get closed for that use below props
 
	




//========================================= How To Manage the Status Bar in Android devices (it is only for the android devices ) ===============================================

StatusBar means that smaller part in android where the network symbol will be shown 
	
How to change the styling of that : 

    <View>
      <Text>StatusBar</Text>

      <StatusBar backgroundColor="red" barStyle="dark-content"/>    //this way I can handle the status bar of the android applications 
								   //barStyle takes two arguments : 1) dark-content , 2) light-content

    </View>


Note : to hide the status-bar we can directly use the hidden property 






//========================================================== Activity Indicator ( Circular Indicator for loading )  ==============================================


when to use it : 
           i) when we are internally in our application doing some heavy task like fetching the data , adding some subscription then we have to show ot to the user on the UI so user can get to know that process is in progress 
or submitting the form 
or saving the updated 
(Like mostly used in all applications )


Note : 1) it takes three props 


    <View>
      <Text>LoadingActivityIndicator</Text>
      <ActivityIndicator/>     {/* By default it will have the size as the small */}

      <ActivityIndicator size="large"/>    {/* it will increase the size of the loader */}   
      
      <ActivityIndicator size="large" color="midnightblue"/>

      <ActivityIndicator size="large" color="midnightblue" animating={false}/>  {/*animating={false} this will track it should get shown on the UI or Not */}    
      

      
    </View>







//======================================================================================= Alert Component also known ans API  =======================================================


Note : i) it will launch the alert dialogue with the specified title and message 
	ii) while creating the alert , 
			1) On android = (we can add only 3 buttons ) 
			2) On IOS = (We can add Many buttons ) 
	
	iii) Inside the Alert.alert();  method is there 
	iv) Alert is the one of the API in React-Native 


Example : 

    <View>
      <Text>AlertComponent</Text>
      <Button title='Alert-1' 
       onPress={() => {
        Alert.alert("Invalid Data !");    //one way 
       }}
    />

    <Button title='Alert-2' 
       onPress={() => {
        Alert.alert("Invalid Data !" , "DOB Incorrect !");   //another way to show the nested Message 
       }}
    />



    <Button title='Alert-3' 
       onPress={() => {
        Alert.alert("Invalid Data !" , "DOB Incorrect !" , [
            {
                text:'Cancel',
                onPress:() => {console.log("Cancel Pressed");}
            },

            {
                text:'Ok',
                onPress:() => {console.log("Ok Pressed")}
            } 
        ]);   //another way to show the nested Message and buttons also 
       }}
    />



    </View>








//================================================================ StyleSheet API ===============================================================

How many Ways we can style the React-Native Applications : 
					i)using inline css 
					ii) using StyleSheet API 
					iii) using tailwind css 

why to use the StyleSheet API : 
			
		i) because our application code become maintainable and more readable 
		ii) and we can use that style across the multiple components of the React-Native 
		iii) it is present inside the React-Native so We have to import that 
                iv) if you simply give the style auto-complete suggessions will not come that is also advantage when we use StyleSheet API We will get the AutoComplition 


How To use it ? 

Actual Code : 


import { View, Text, StyleSheet } from 'react-native'
import React from 'react'

const AppStyle = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.TextChanges}>AppStyle</Text>
    </View>
  )
}

const styles = StyleSheet.create({
    container:{flex:1 , backgroundColor:"plum" , padding:60},
    TextChanges : {fontSize:50}
})

export default AppStyle



Note : 1) While margining the styles in the form of the Array the last Array element CSS will take preference 
       2) In React Native StyleSheet will get render At once only so it will not able to track the dynamic changes of the state variables in React-Native hence for state change style give it in the jsx only using the ternary operator 




Today Learned : (All Practical Code done)
How To handle Images in react native  ,
Alert With Giving Differant Buttons in Alert Message, 
StyleSheet API , 
Activity Indicator Loader , 
Status Bar for Android , 
How Modals works In React-Native , 
Scroll View  , 
Pressable Component In React for the user Interaction like onPress`, `onPressIn`, `onPressOut`, and `onLongPress 










//========================================================================= Date :05/11/2024  (Tuesday) ======================================================================


Todays I have to Cover the below Concepts : 

1) Box Model In React Native
2) Shadow And Elevation 
3) Style Inheritance 
4) Layout With Flex-Box 
5) Flex Shrink , Flex grow , horizontal and vertical alignment 





===========================================================================  Styling In React-Native  ================================================================





1) Dimension In React Native : 
		Note :  In React Native All the Dimensions Are the Unit less Which Re-presents Density Independent pixels 


2) When To Use The percentage as the Unit :
			 When the Dimensions For the Parent is Set then All Child for That Parent we can use the Percentage as the Dimensions 


3) Flex:1 
	   i) it Will take the All the available space of the parent Container 
	   ii) it will set the default flex-direction to the column 

	
4) Border In React Native : 
		i) In Web We are giving the border using the border:"10px solid red"    ( But it Will Not Work In React-Native )

		ii) border Properties In React-Native : 

 				        borderWidth:2,
       					borderColor:"red",
        				borderStyle:"dashed",  //here differant values like : solid , doted
        				borderRadius:10


		iii) IMP : (How Border-radius Work Accross the Differant Platform Like IOS And Android ) 

			1) For Text Component borderRadius Will Be Applicable In Android Device Applications Only 
			2) But For View Component borderRadius Will Be Applicable Across the Android Application and also On the IOS Application (Here It Will Work For The Both platform Android And IOS )



5) Shadow property In React native : (Note For Android shadow Properties will Not Work We Have To Use Elevation which internally utilizes android elevetion API )

      1) First lets See How it Was Working In Web :

              box-Shadow : hoz-offset vertical-offset blur spread color 
      
      2) In React Native It Works Differant : (refer for the auto shadow website : https://ethercreative.github.io/react-native-shadow-generator/)

      Code : 
              shadowBox:{    //this will work for the IOS but For the Android We Have to use the elevation Property 
                  shadowColor:"red",
                  shadowOffset:{
                      // it will take the two arguments 
                      width:0,
                      height:11,
                  },
                  shadowOpacity:0.57,          //this sets the transperancy of the of the shadow 
                  shadowRadius:15.19,           //this accept the number to set the blur radius
                  elevation: 23 ,               //this is also used because this shadow should get applied to the android plaform application also 



              },
    


6) flexBox In React-Native  (it is directlly work opposite to the web flexbox )

              flex:1    //it will take the entire width and default direction is column hence 

              main axis = Y-axis (top to bottom)
              cross axis = X-axis (left to right )

  Most IMP : 1) In React Native View (Which Is Like Div) it is Automatically set to the flex and its flex direction is column 
              2) And All the Childrens Inside the View Are considered As the flex-iteams 
              3) flex container only takes the space which are required for its children by default without children it will not take any space 
              4) and When we do flex:1 then it will take the entire Space 

If We Want Childrens Should take the space according to us : So mension that in the Flex:3  means out of the total 4 parts it will take the 3/4 space 


7) Flex Direction : 
            flexDirection:"column",
            flexDirection:"column-reverse",
            flexDirection:"row",
            flexDirection:"row-reverse",

8) justify-content : (Works On Main axis is Y) (By default)


    // justifyContent:"flex-start",
    // justifyContent:"flex-end",
    // justifyContent:"center",
    // justifyContent:"space-around",
    // justifyContent:"space-between",
    // justifyContent:"space-evenly",

9) align iteams : (Works On CROSS axis is X)
                   
// alignItems: 'flex-start';
// Aligns children components to the start of the cross axis (top for column, left for row).
const styles = {
  alignItems: 'flex-start',
};

// alignItems: 'flex-end';
// Aligns children components to the end of the cross axis (bottom for column, right for row).
const styles = {
  alignItems: 'flex-end',
};

// alignItems: 'center';
// Centers children components along the cross axis (vertically for row, horizontally for column).
const styles = {
  alignItems: 'center',
};

// alignItems: 'stretch';
// Stretches the children components to fill the container along the cross axis (default behavior).
const styles = {
  alignItems: 'stretch',
};

// alignItems: 'baseline';
// Aligns children components such that their baselines (text baseline) are aligned.
const styles = {
  alignItems: 'baseline',
};







    
Note :  While Giving the Multiple Style I have to give it in the Array Notation in Style like : style={[style1 , style2]}





10) Align self : 
              1) it have the by-default property as the auto and it takes it value from the parent that is align-iteams 

        i) auto: Inherits from the container's alignItems property.
        ii) flex-start: Aligns the item at the start of the cross axis.
        iii) flex-end: Aligns the item at the end of the cross axis.
        iv) center: Centers the item along the cross axis.
        v) stretch: Stretches the item to fill the container.
        vi) baseline: Aligns the item along its baseline.



11) Flex-wrap : i) how it wrap the content with respect to screen or the available space 
                ii) it is also used to handle the overflow of the content within that particular component 
                iii) wrapping always occurs from the last iteams



          flexWrap:"wrap",          //iteams will get wrap within the container 
          flexWrap:"no-wrap",       //no-change 
          flexWrap:"wrap-reverse", //it also wrap but in reverse direction 


12)Align-Content :  (Works Along the Cross Axis that is Row)
                    i) it align the line of the content along the cross axis   (Content Will Come on the Single Line)
                    ii) the condition is that multiple row should exist within the container 
                    iii) the default value for the align content is the flex start 



    //alignContent:"flex-start",  //no change 
    // alignContent:"flex-start",
    // alignContent:"center",





13) Gap : ( it is used to give the gap between the row or columns)

    rowGap:20,
    columnGap:30,
    gap:30



14) flexbasis Property : 
                i) it determines the initial size of the flex-iteams before any extra space in the container is distriubuted 
                ii) it serves as an alternative of the using height and width properties in flex layout 

Code : (When You Will use flexBasis and height together then you will see that the FlexBox having the flexBasis will have the more height than the other which is not having flexbasis)

        <FlexBox style={{backgroundColor:"brown" , flexBasis:200 , flex:1}}>FlexBox - 3</FlexBox>
        <FlexBox style={{backgroundColor:"brown" , height:200 , flex:1}}>FlexBox - 4</FlexBox>



15) flexShrink Property : (Shrink Means It will Converted into the Smaller Size)
             1) When the default size is larger than the flex container then How it should behave that will be managed by the flexShrink 
            2) by default flexShrink will have the 0 as the value 

Code : 

        {/* For learning of the How Flex-Shrink Works  */}
        <FlexBox style={{backgroundColor:"#0000FF"  , flexShrink:1}}>FlexBox - 1</FlexBox>
        <FlexBox style={{backgroundColor:"#FFA500" , flexShrink:1}}>FlexBox - 2</FlexBox>


Note : When You Will Write the below code for the shrink then FlexBox - 2 size means width will be more as compare to the Flexbox - 1 ( But Both Will Be Shrinked Wihin The That Container just width differs )

        <FlexBox style={{backgroundColor:"#0000FF"  , flexShrink:10}}>FlexBox - 1</FlexBox>
        <FlexBox style={{backgroundColor:"#FFA500" , flexShrink:1}}>FlexBox - 2</FlexBox>





16) flexGrow : 
              i) it determines How Much Space the iteams should occupy inside a flex container when there is Extra Space is available
              ii) By-default All the flex-iteams Will have the value as the 0 when you want to grow its size you have to give the value > 0
            
            When To Use It : 
                      i) use it when You use `flexGrow` in React Native to make a flex item grow and take up available space in the container, 
                        relative to other items with a non-zero `flexGrow` value.
                      ii) In Short How the flex-iteams Should Grow That Will Be defined By the flexGrow


Code : 

        <FlexBox style={{backgroundColor:"#FFA500" ,  flexGrow:1}}>FlexBox - 1</FlexBox>
        <FlexBox style={{backgroundColor:"#0000FF" ,  flexGrow:1}}>FlexBox - 2</FlexBox>
        <FlexBox style={{backgroundColor:"#008000" ,  flexGrow:1}}>FlexBox - 3</FlexBox>





17) flex VS flexGrow : (V-V-IMP)

      i) When flex is set to the positive Number it is equivalent to setting flexGrow With the same positive Number 
      ii) flex also internally sets flexShrink to 1 and flexBasis to 0

  Syntax : 

          flex:<positive-Number>    

          flexGrow:<positive-Number> , flexShrink:1 , flexBasis:0

 





//========================================================================= Date :06/11/2024  (Wednesday) ======================================================================


Todays I have to Cover the below Concepts : (Till Lecture 50 I Have to complete)

1) Positions In React Native (relative and absolute)      ( Some CSS Issue I was getting with the text content )
2) Dynamic user interfaces 
3) Dimensions API 
4) useWindowDimensions
5) SafeAreaView
6) platform Specific Code 





1) Positions In React Native: it defines How the element is going to get positioned within the parent component 

                  i) types Of the Positions : 

                              i) relative : (by default position of React-native Components )

                                          i) it will take the original space of the content within that parent 
                                          ii) and we can change the position using the top . left , bottom , right values 
                                          iii) this offset does not affect any parent or sibiling with their positions 


                              ii) absolute : (we use absolute when we want the precise control over the that element should present where On the UI)

                                          i) it will not take the original space 
                                          ii) the content will go to the parent top and left 



Note : when for the relative by-default position if I change the top and left then that View Component Border Will Overflow the content 









//========================================== Why To Use the Dimensions API =========================================

        i)when we want to address the way to add the responsive style based on the device size then I have to use the Dimensions API 
        ii) Summary DimensionsApi gives the develper access to the user Device width and height so accordinglly that width and height will be given 



//=================================== We Can Create responsive Style using the Dimensions API Across the All Devices ==========================


Steps To Use the Dimensions API : 

                    i) Install it first from the react-native: 

                                import { Dimensions } from 'react-native'

                    ii) then Obtain the device width and height using the API 
                                
                                const windowWidth = Dimensions.get("window").width;
                                const windowHeight = Dimensions.get("window").height;

                            then using the conditional rendering you can able to set the width and height like below : 

                                        width:windowWidth > 500 ? "70%" : "90%",
                                        height:windowHeight > 600 ? "40%" : "90%",    

                       Note : Now using the above width and height which depends upon the Device I will get it (Now I can use it more convinientlly)         


                   iii) screen : it refers to the Entire physical display of the device which includes Status Bar , nauthes , and system navbar (Means Entire Screen)

                   iv)window : it refers to the visible area of our app ( Which Does Not Inculde Status Bar , nauthes , and system navbar)  (Means Our Application)          


Note : Ma




// ================================================== Dimensions API Drawback ================================================

issue : 
      i) Dimensions API Does Not Accept the dynamically changes of the width and height when the device is getting rotated from portrait to landscape and vice versa 
      ii) you can confirm it via loging the width and height in the console 
      iii) Now if i wanted to get the updated Dimension I have to again re-start the Application (This is the major drawbag of the using the Dimensions API ) 
      iv) (So To Avoid This We Will Use useState and useEffect hook) 
      v) but preferred Way is useWindowDimensions()



When The Dimensions Can Change : 
                      i) when the user device orientation get changes then the Dimension also get changes like width and height of that device so We Have to update the UI accordinglly

Note : Make sure the orientation:"default"    //it shold have the default value then auto rotate for the device the design will beome the responsive 



========================== To Implement point iv) (So To Avoid This We Will Use useState and useEffect hook) ===========

step 1) import the useState and useEffect hook from react 

step 2) create the one state called as the dimensions 

step 3) using useEffect 

step 4) we extract the device width and height from dimension state variable 

step 5)  then we will get the height and width using the our state dimensions 

Code : 

import { View, Text, StyleSheet, Dimensions } from 'react-native'
import React, { useEffect, useState } from 'react'

const App = () => {

  // create the one state called as the dimensions 

  const [dimensions , setDimensions] = useState({
    window:Dimensions.get("window"),   //this will listen to the changes in the device dimensions and update the dimensions accordinglly 
  })

  //step 3 using useEffect 

  useEffect(() => {
    const subscription = Dimensions.addEventListener("change" , ({window}) => {
      // this callback will recive one object we are de-structuring the window out of it and that new window I have to set to that Dimension 
      setDimensions({window});

      // we will also write the cleanip function while un-mounting this component 
      return () => {subscription?.remove()}  //step 4 we extract the device width and height from dimension state variable 

    })
  })


  //step 5)  then we will get the height and width using the our state dimensions 

  const {window} = dimensions;
  const windowWidth = window.width;
  const windowHeight = window.height;


  return (
    <View style={styles.container}>
      <View style={[styles.box , {
            width:windowWidth > 500 ? "70%" : "90%",
            height:windowHeight > 600 ? "40%" : "90%",
      }]}>
        {/* <Text style={styles.text}>Dynamic UI App</Text> */}

        {/* Now we will set the font size using the  windowWidth and windowHeight*/}

        <Text style={{fontSize: windowWidth > 500 ? 50 : 24 }}>Dynamic UI App</Text>
  
      </View>
    </View>
  )
}






//=====================  Solving the Dimensions API Drawback  Using the Above Code via useState and useEffect is little bit complex ===============

// ====================================== So to Write the clean Code We will use Below Thing =================================================


========================================================== useWindowDimensions()     ===========================

refer : useWindowDimensions.js file for it 

const windowWidth = useWindowDimensions().width;
const windowHeight = useWindowDimensions().height;





//==================================== Writing The Platform Specific Code Using the React-Native ==================

Key Points To remember : 

            i) While developing the Cross Platform Applications maximizing code re-usability is the main priority 
            ii) There are Some situvation where it becomes necessarry to tailor your code to specific platforms 
            iii) React Native Offers Two Approaches to tailor your code to specific platforms : 

                          1) using platform module (Platform present inside the react-native) 

                                      1)First Way using Platform.OS  (It is suitable for the Small Changes)

                                          i)Platform.OS === "android"
                                          ii)Platform.OS === "ios"

                                      2)Platform.select() (We will use this for the comprehensive changes (Means For More Changes))

                                                    text:{
                                                        ...Platform.select({
                                                            ios:{
                                                                fontSize:50,
                                                                color:"red"
                                                            },
                                                            android:{
                                                                fontSize:50,
                                                                color:"magenta"
                                                            }
                                                        }),
                                                        fontWeight:50
                                                    }


//================================================================== Date : 07/11/2024 ======================================================================

Concepts To Cover : 
          1)Platform Specific Code (Using Fle extensions)
          2)Building A Pokemon card UI 
          3) React Native List 
          4) React-Native flat List (Performance better than Normal React Native List )



        1)Platform Specific Code   

                2) using platform-specific file extensions (We Prefer this Way when we want to create totally differant UI For the android and IOS)

                                      i) here we split our code in seperate files with ios and android extension before the file main extension like 
                                      ii) While redering through the differant files also with platform specific extensions I have to perform the conditional rendering Using the Platform API 

                                                Example : 1) CustomButtom.ios.js or CustomButton.android.js 




        2)Building A Pkemon card UI : done with the pokemon card continue after the lunch 3rd vedio 




//=============== Images in React native resizeMode='takes-2-values' =========================

Code :     resizeMode="contain"

contain: The image will be resized to fit within the container while maintaining its aspect ratio. 
          This means that the entire image will be visible, and the image will not be cropped, 
          though there may be empty space around the image if the aspect ratios of the image and 
          container do not match.

cover: The image will be resized to fill the entire container, potentially cropping parts of the 
        image if the aspect ratios of the image and the container do not match. This option is 
        typically used when you want to ensure the image completely covers the available space.


// =========================== To Break the text and go on next Line use below ======================

{"\n"}

//===================== To set the lineHeight between the multiple lines in react native style for text use ===============

lineHeight: 24, // Set the line height here



//=================== To Add the horizontal Line in react native using the view ======================

<View style={styles.horizontalLine} />

//its css 
  horizontalLine: {
    width: '100%',
    height: 1,
    backgroundColor: '#ccc',
    marginVertical: 20,
  },



//=========================== FlatList (With its Differant Props || Why to refer FlatList Over List || because it is faster to large lists ) =================================================

Note : FlatList should be not nested Inside the ScrollView (it will give error ) because it automatically have functionality of the scroll 

4) React-Native flat List : 
                      it takes the below props out of two are compulsory that is data={} and renderItem={}

      1) data={}  //here you have to pass the array of iteams that you want to pass in the list (it works as the source of information for the flatlist )

      2)renderItem={} //it is the function which returns the jsx for rendering each item in the list 

              Note : its callback function recives and object containing the current item and you can define how each item 
                should be rendered this is same as the what we return from the map() method 
      3)keyExtractor={}
                    
                    i) this is the function that takes the item from the data array and returns the unique key for that item 
                    ii) hence it is used to identify the unique item from the List similar to the key prop which is used in the map method 
                    iii)By-default it returns 
                                  i)item.key and 
                                  if it is not present it returns item.id 
                                  and if that is also not present it uses index as the key which is the second parameter of the callback function 
            
            Example : (How keyExtractor props is used )

                    keyExtractor={(item , index) => item.id.toString()}
                          
      4)ItemSeparatorComponent : (we do-not need to add the margin explicitlly)
                              i)ItemSeparatorComponent renders the component between each item in the list excluding the top and botton margin 
                              ii) We can Assign the any react component to it or you can assign the any function that returns the react component 

                    Code : ItemSeparatorComponent={<View style={{height:16}}/>}

      5)ListEmptyComponent : 
                            i) this prop accept the react component and renders it when the list is empty 
                            ii) when we will specify the data prop as the empty array then it will internally renders the ListEmptyComponent UI that it is rendering 

              Example : 
                      data={[]}    

                      ListEmptyComponent={ <View style={styles.noItemFound}><Text style={styles.noItemFoundText}>No items Found</Text></View> }          


      6)horizontal : use this prop when I want to render the list in the horizontal Way 



//============= To Add the Header and the Footer To the FlatList Component I have to use the Below two props Which Are designed For That Purpose Only =========
                      
                      IMP : It Will Be Most Usefull To creating the Engaging interfaces For The FlatList 

      7) For Adding the header In the List use Below prop : 
                            
                Example :   ListHeaderComponent={<Text style={styles.headerText}>Pokemon List Header</Text>}   // To Add the header to the Pokemon List 


      8) For Adding the Footer In the List use Below prop : 
                            
                Example :   ListFooterComponent={<Text style={styles.footerText}>Pokemon List Footer</Text>}      //To Add the Footer Component  to the Pokemon List
     

Entire Code Of the FlatList : (With its Differant Props)



Code : 

      <FlatList

           data={pokemonList}  //list that you want to render in the UI 

          //data={[]}   //used when the data is not fetched so along with the ListEmptyComponent I have to use it to S=display some message in the Ui 

          renderItem={({item}) => {

            let {id , name} = item;

            console.log("item_Id : " , item.id);
            

            return (
                  <View key={item.id} style={styles.card}>

                      <Text style={styles.cardText}> {item.type} </Text>

                      <Text style={styles.cardText}>
                          {`${item.id})  ${item.name}`}
                      </Text>

                  </View>
            )
          }}

          keyExtractor={(item , index) => item.id.toString()}

          ItemSeparatorComponent={<View style={{height:16}}/>}

          ListEmptyComponent={ <View style={styles.noItemFound}><Text style={styles.noItemFoundText}>No items Found</Text></View> }

          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List Header</Text>}   // To Add the header to the Pokemon List 

          ListFooterComponent={<Text style={styles.footerText}>Pokemon List Footer</Text>}      //To Add the Footer Component  to the Pokemon List 
      />





Note :  
      i) FlatList Component ensures it generates a few devices length of the content in advance to ensure smooth scrolling 
      ii)FlatList renders the list iteams lazyilly


        Example :Suppose we have the 10,000 list iteams (How it will rendered in List vs FlatList)

                  i)in List it will render the all the list iteams at once (that will be slower so we prefer FlatList )

                  ii)using FlatList it will render 6,400 list iteams which is lesser than List rendering count out of total 10,000 becasue 
                       FlatList Component ensures it generates a few devices length of the content in advance to ensure smooth scrolling 










//================================================================== Date : 08/11/2024 ======================================================================

Target : Complete till the lecture 61  

Concepts To Cover : 
          1) Item Separator                (Done Notes Are typed In previous Date only )
          2) List Empty                    (Done Notes Are typed In previous Date only )
          3) List Header and Footer       (Done Notes Are typed In previous Date only )
          4) SectionList                       (Done)
          5) Inputs and Forms                  (Done)
          6) TextInput                         (Done)
          7) TextInput Props                   (Done)
          8) Multiline TextInput               (Done)



// ================================================================ 4) SectionList   ================================================================

              i)it is the performant component designed for rendering sectioned lists 
              ii) whenever you are reading the data in SectionList so in that actual data.json file must have the actual data as the data key 
                  and other properties in .json file we can name anything 

        ///////////////////// Below Props It takes /////////////////////

        1)sections={}

                      i) which is the source of the information for the section list like example sections={groupedPokemonList}


        2)renderItem={} : 

                       i) This props is the function which returns the JSX for rendering each item in the list 
                       ii) it recives the one object which will have item so I have to de-structure it  
                      iii) it will render the all the data which is present inside the .json file under the data key 

        3) renderSectionHeader={} 

                        i) this prop is used to render the header of the each section of the list using the its callback function  
                        ii) its callback function recives one object that contains the current sections under section key destructure it 

          Note : section refers to the antire object in the json Array 

                  
                  Example : 

                        renderSectionHeader={({ section }) => {
                            return (
                                <Text style={styles.sectionHeaderText}>{section.type}</Text>
                            )
                        } }

        4)ItemSeparatorComponent : (we do-not need to add the margin explicitlly) (used to get the seperation between the items)
                              i)ItemSeparatorComponent renders the component between each item in the list excluding the top and botton margin 
                              ii) We can Assign the any react component to it or you can assign the any function that returns the react component 



        Code : 


            ItemSeparatorComponent={() => {
                return (
                    <View style={{height:16}}/>
                )
            } }








//======================================= Inputs and Forms In React Native =================================

// ================================== Web (React Dom) VS  (Mobile) React Native ===============================


In web : 

To take the input elements : (We Have Below Options)
                  i)input field 
                  ii) text area 
                  iii) dropdown menue 
                  iv) checkboxes 
                  v)radio groups and etc

====================== But In React Native We Have the very rare inbuild Components to take the input from the user  


In React-Native : 
                i) TextInput and Switch  
                ii) and for the checkbox and others we use Expo SDK 
                     

Things We care For the react Native Forms While creating it 

                i) Managing Form State : 
                                controlling the dynamic data within our forms 

                ii) Handling Form Validation :
                                Ensuring that Integrity and validity of the user Input 


                iii) Displaying validation Messages :
                                Communicating the results of the validation to the user 

                iv)submitting the form data :
                                Sending the collected information where it needs to go 




// ============================================ Input In React Native =====================================

1) TextInput : 
            i) textInputComponent is the fundamental building block for user Input in React-Native 
            ii) it allows users to input text and other data into your app 


Code : (Text Input with its props that it takes)

      {/* Now to take the input from the user use TextInput */}
      {/* TextInput With its Props  */}

      <TextInput style={styles.input}

                value={name}

                onChangeText={(text)=>setName(text)}  //adding the event 

                placeholder='enter email'     //to show to user before entering the actual text 

                secureTextEntry={true}            //it will hide the data from the user 

                // secureTextEntry={false}           //it will hide the data from the user 

                keyboardType='numeric'           //means numeric keyboard will be appear when user will click on text (it takes differant values )

                // by-default every character of the first word will become the capital so restrict that behaviour I have to turn it off 
                
                autoCapitalize='none'                //it also takes the differant values refer to that too 

              
                
      />


For Displaying the keyboard : (For IOS Shortcut)
                            ( ctrl + shift + k)






// ============================================ larger Text Input (We Also use TextInput Component) =========================================



Code : (Self Explainatory) 

      <TextInput style={[styles.input , styles.multilineText]}

                  placeholder='Enter Message'   //note : in android for multiline text placeholder will be along the main axis it will be in the center position 
                  
                  multiline                   //this will change the TextItem to the mutiline text 
                  
                  textAlignVertical='top'   //this will set the placeholder message to the top 
      />






//================================================================== Date : 011/11/2024  (Monday)======================================================================


Target : Complete till the lecture 61  

Concepts To Cover : 
          1) Switch  (Another Way Of the Taking the input In React Native)
          2) Login Form   
          3) KeyboardAvoidingView      (Keyborad will Directlly Come On the Form S)
          4) Form Validation
          5) Form Submission       -------- Till First Half (By Depth Understanding)
          6) Networking
          7) GET Requests
          8) Loading State
          9) Pull to Refresh




//=================================== 1) Switch  (Another Way Of the Taking the input In React Native) =========================

When To Use It ? 
              i) When We Wanted to integrate the toogles into our App interfacce means in the UI then presfer to use Switch Component 
              ii) it is well suited for the scenarios where you require users to make binary choices such as anabling and disabling specific app feature 

              Example : 1) Enablisng or Disabling the dark Mode 
                        2)  Allowing users to enable or disable push notifications.
                        3) toggle between public and private account setting 
                        4)  Enabling or disabling location access.
                        5) Allowing users to toggle data sharing or tracking preferences.

Note : it will not work as w intended Untill we connnect it to the any one state valriable 


Code To Use Switch State : 

                  import { View, Text, Switch, StyleSheet } from 'react-native'
                  import React, { useState } from 'react'

                  const SwitchComponent = () => {

                      const [isDarkMode , setIsDarkMode] = useState(false);

                      const handleDarkMode = () => {
                          setIsDarkMode((previousState) => !previousState);
                      }

                    return (

                      // Note : we can give the styling based on the dynamic variable value changes in the UI witing the jsx becasue StyleSheet gets renders At first (Means At once Only)

                      <View style={[styles.switchContainer , {backgroundColor:isDarkMode? "black" : "white"}] }>

                        <Text style={[styles.text , { color: isDarkMode ? 'white' : 'black' }]}>Dark Mode</Text>

                        <Switch value={isDarkMode} onValueChange={handleDarkMode} 

                              // Adding the style 
                              style={{ transform: [{ scale: 1.5 }] }} // Increase size by 1.5 times

                              // We Can Use Track Color to set the trackcolor for differant state 
                              trackColor={{false:"767577" , true:"red"}}    // changes the color on the insider part of the switch 

                              thumbColor="yellow"     //color of the circular part of the switch 
                        />


                      </View>
                    )
                  }

                  const styles = StyleSheet.create({
                      switchContainer:{
                          flexDirection:"row",
                          alignItems:"center",
                          justifyContent:"space-between", 
                          paddingHorizontal:10,
                          padding:50
                          

                      },
                      text:{
                          fontSize:20
                      }
                  })

                  export default SwitchComponent














//=========================================================== All About Forms In React Native  =============================================

//========================== Updating the State In React Native ========================================

                            onChangeText={(text)=>setName(text)}   //prefer this way 





//================================================ LogIn Form In React Native (With Error Handling) =========================================

import { View, Text, StyleSheet, TextInput, Button, Image, KeyboardAvoidingView } from 'react-native'
import React, { useState } from 'react'

const LoginForm = () => {

    const [userName , setUserName] = useState("");
    const [password , setPassword] = useState("");

    const [isErrors , setIsErrors] = useState({});



    const handleLogin = () => {

        if(validateForm()){
            console.log("userName : " , userName);
            console.log("password : " , password);
    
            // Make Sure after submiting the form data will be empty 
            setUserName("");
            setPassword("");
            setIsErrors({});
        }




    }

    const validateForm = () => {

        let errors = {}

        if(!userName){
            errors.userName = "UserName Is Required"
        }

        if(!password){
            errors.password = "Password Is Required"
        }


        //  The I have to update the error state 
        setIsErrors(errors);


        return Object.keys(errors).length === 0;



    }

  return (
    <KeyboardAvoidingView behavior='padding' keyboardVerticalOffset={100} style={styles.container}>
      <View style={styles.form}>

        <Image source={require("../assets/google_logo.png")}  style={styles.image}/>

        <Text style={styles.label}>UserName : </Text>

        {/* here for userName I will check for the errors  */}
        {
            isErrors.userName ? <Text style={styles.errorText}>{isErrors.userName}</Text> : null
        }

        <TextInput
            placeholder='Enter Your userName'
            style={styles.inputText}

            value={userName}

            onChangeText={(userName) => {
                setUserName(userName)
            }}

        />


        <Text style={styles.label}>Password : </Text>

        {/* here for password I will check for the errors  */}
        {
            isErrors.password ? <Text style={styles.errorText}>{isErrors.password}</Text> : null
        }


        <TextInput
            placeholder='Enter Your Password'

            secureTextEntry   //for password should be hidden 
            style={styles.inputText}

            value={password}

            onChangeText={(password) => {
                setPassword(password)
            }}


        />

        <Button
            title='login' 
            onPress={handleLogin}
        />

      </View>
    </KeyboardAvoidingView>
  )
}

const styles = StyleSheet.create({
    container:{
        flex:1,
        justifyContent:"center",
        paddingHorizontal:20,
        backgroundColor:"#f5f5f5"
    },
    form:{
        backgroundColor:"white",
        padding:20,
        borderRadius:10,
        shadowColor: "black",
        shadowOffset: {
            width: 0,
            height: 2,
        },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        
        elevation: 5,
    },
    label:{
        fontSize:16,
        marginBottom:5,
        fontWeight:"bold"

    },
    inputText:{
        height:40,
        borderColor:"#ddd",
        borderWidth:1,
        marginBottom:15,
        padding:10,
        borderRadius:5
    },
    image:{
        width:300,
        height:100,
        marginBottom:50
    },
    errorText:{
        color:"red",
        marginBottom:10
    }


})

export default LoginForm





// =====================================================  3) KeyboardAvoidingView  (Major Issue While Handling the Forms )  =========================================

Why To use It ? 

              i) Because When the user will type of the Textinout to enter the userName or password Then Keyboard Will Come over the 
              Our Form So the some fileds of the form will be not visible to the user hence to avoid such cases I have to use the KeyboardAvoidingView  

Note : to use this You have to replace the outer-Most-View Componenet with the KeyboardAvoidingView 

Example : 

    <KeyboardAvoidingView behavior='padding'  keyboardVerticalOffset={300}>

            //behavior='padding'  (This Ensures the component Increases the padding at the bottom by matching the keyboards height )

            ---------UI Will Come Here ------------

    </KeyboardAvoidingView>








Note :  
    i) IMP ( When You Change the image Height Inside the LoginForm again I will get the same Error that keyboard will come 
    over the form )  
    ii) In such cases  use props  keyboardVerticalOffset={300}















// ============================================================ (Networking In React Native ) ===============================================

I have created the new Application name as : Networking_In_React_Native  

Concepts Convered : 
                  i) fetching the data and submitting to API 
                  ii) Loading the States 
                  iii) Error Handling 
                  iv) FlatList Component to display our data 
                  v) we Can Use axios 


link JSON placeholder data API Endpoint : https://jsonplaceholder.typicode.com/posts?_limit=10  



//================================================================== Date : 12/11/2024  ======================================================================


Target : Complete till the lecture 61  

Concepts To Cover : 
          1) POST Request
          2) Error Handling  
          3) Navigation
          4) Stack Navigation
          5) Navigation between Screens
          6) Passing Data between Screens
          7) Stack Navigation Options






//=============================================================== POST Request In React Native ===============================================


step 1) creating the variables to track the post title and body 

step 2) creating the post request ( below is the code made the post request using the axios also using the fetch )





    const addPost = async () => {

        // Now User Click to add that post in the Ui So I have to make the isPosting = true 
        // so the differant text will be visible to the user that is Adding....... so user will get to know that that post is getting added 
        setIsPosting(true);


        //first implementing the using the fetch 
        // const response =  await fetch("https://jsonplaceholder.typicode.com/posts" , {
        //     method:'post',
        //     headers:{
        //         "Content-Type":"application/json"
        //     },
        //     body:JSON.stringify({
        //         title:postTitle,
        //         body:postBody
        //     })
        // })


        // const newPost = await response.json();

        // setPostsList([newPost , ...postsList]);


        //========================== Implementation of the post request using the axios =========================

        // Approach 
        // I have to create the one object which will have the title and the body of the post then add that using the post 
        let newPostUsingAxios = {
            title:postTitle,
            body:postBody
        }


        // Same above thing I will try it implementing by the axios post method 
        axios.post('https://jsonplaceholder.typicode.com/posts' , newPostUsingAxios).then((response) => {

            console.log("response " , JSON.stringify(response.data , undefined , 4));
            
            
            setPostsList([response.data , ...postsList])   //updating the original post list 

        })
        .catch((error) => {
            console.log("error " , error);
            
        })

        // then I have to make title and body and isPosting to false 
        setPostTitle("");
        setPostBody("");

        setIsPosting(false);

        

    }








//=============================================== 2) Error Handling  (In React Native)  ====================================== 

steps to handle the errors 
                step 1) maintain the one state for the errors
                step 2) using the try and catch block we handle the errors in react native 

                        Example : 
                                      try{

                                        //fetching the data or heavy opearation that you want to perform 

                                      }
                                      catch(error){
                                        
                                        //here update the any state that you will have for the errors 

                                      }

Note : 
        i)localhost url do not work with the android emulator 
        ii) so we can make the local endpoint request from the IOS Devices 
        ii) bt on android 

refer below file : (For More In Details About the code How it Works)
              i)To get the more details of handling the error and also implementing the post request in the React Native refer the below file form the networking application of the react 
                FetchDataUsingAxios.js  (present inside the components folder of the app)














// ======================================================== Navigation In React Native Applications ============================================
Note : 
      i) it is the heart of the react native applications (Or Any Mobile or Web Applications)


Navigations : (Defination)
            The mechanism that allows users to move Accross differant screens , access features and generally use our app eficientlly 

            ii) We achieve the navigation in the react native using the React Navigation Library 

Most IMP : React Navigation works both with and without Expo In react Native App 

Note For React native app created using Expo : 
                      Expo has its own built in routing feature exclusive to Expo projects 



//================ React Navigation Provides variety of the Navigators =============================

React Navigators : 
                  i) Stack navigator    (we mostly prefer this)
                  ii) Drawer navigator
                  iii) Tab navigator



i) Stack navigator  : (Works Like same as Stack data Structure Last In First Out )
                Stack Navigators Provides a way for your app to transition between screens where each new screen is placed on top of stack 

When to use Stack navigator : (refer the below link to more details when to use stack navigator)
                      link : https://drive.google.com/file/d/19mFxUYtP7hqIsmmwzyVS2WDrE83xVSMM/view?usp=sharing


The React Native Library offers two stack navigators : 
                      1) Stack Navigator 
                      2) Native Stack Navigator 

                1) Stack Navigator : 
                                 i) the Stack navigator is the javascript based Navigator which offers a high degree of customization ,
                                   making it a great choice for apps that required a unique navigation experiance 
                                 ii) but this comes at the cost of performance especially when compared to its counterpart , that is Native Stack navigator  


                2) Native Stack Navigator : 

                                  i) The Native Stack navigator leverages the native navigation constructs of IOS And Android 
                                      by providing the better performance and more native feel to the transition and gesture 

                                  ii) The caveat here is , it might not offer the same level of customization as the Stack Navigator     

ii) Drawer navigator : 
                Drawer navigator renders a navigation drawer on the side of the screen which can be opened and closed via gestures 


iii) Tab navigator : 
                  A tab navigator at bottom of your screen lets you easily switch between differant routes 




//  ========================= Steps to Use React Navigation in Your Project ( Using Stack Navigator ) ===================================

step 1) install the react navigation as the dependency 

          command : npm install @react-navigation/native


step 2) install the below dependency 
          
          command : npm install react-native-screens react-native-safe-area-context


step 3) To work with the react navigation we need a wrapping component for the Entire app use below template 

code : 
        import * as React from 'react';
        import { NavigationContainer } from '@react-navigation/native';

        export default function App() {
          return (
            <NavigationContainer>{/* Rest of your app code navigation code write here */}</NavigationContainer>
          );
        }



step 4) the we will use the Stack Navigator for that install one package 

      command : npm install @react-navigation/native-stack



step 5) then install the createNativeStackNavigator from @react-navigation/native-stack

code : 

      import { createNativeStackNavigator } from '@react-navigation/native-stack';


step 6) then create the native stack navigator instance 

code : 
      const Stack =  createNativeStackNavigator();
       

step 7) Now lets setup the navigator within App Component 

        i) within navigation container use Stack.Navigator





================================================================================= Date : 13/11/2024 ===================================================================        



//======================================================= Below To Implement the Navigation In react native ======================    



import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import HomeScreen from './screens/HomeScreen';
import AboutScreen from './screens/AboutScreen';

const Stack =  createNativeStackNavigator();


export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
          <Stack.Screen name='Home' component={HomeScreen}/>   //name='Home' this will become the header of that particular page 
          <Stack.Screen name='About' component={AboutScreen}/>

      </Stack.Navigator>
    </NavigationContainer>
  );
}




Note : 
      1) Stack.Screen name='Home' component={HomeScreen}/>  //from this line header will be Home at will have the design pattern which is going to be the platform specific 
      Means for IOS by-default it will be shown at the center but in android it will be at the start of the header 
      2) By default the top screen in the navigator will be the by-default screen (We can change it using the initialRouteName  
      
      Code : 
            <Stack.Navigator initialRouteName='About'>)

            </Stack.Navigator>





//=============================================== Now How To Navigate Between the Two Screens ==========================================

I have created the two screens that is :
                              i) Home 
                              ii) About 

ways to achieve the navigation In React Native : 
                            i) using the navigation prop 
                            ii) using the useNavigation() hook 


Some key points to remember While implementing the Navigation between the differant Screens: 

                              i) Every Screen component In react native application provided by-default automatically 
                                  have prop navigation by react navigation 

                    
======================= i) Achieved Navigation using the navigation prop ==================================

Code : 

        import { View, Text, StyleSheet, Button } from 'react-native'
        import React, { useEffect } from 'react'

        const HomeScreen = ({navigation}) => {    //by default each screen will have the prop as navigation we have to destructure it and use it 

          useEffect(() => {
            
            console.log("Home Rendered ");
            
          } , [])


          let navigateTOAbout = () => {
              
              //now re-direct the user to the About screen 
              navigation.navigate('About');    //inside the navigation object .navigate method will take the name of the screen to which you want to navigate 


          }

          return (
            <View style={styles.container}>
              <Text style={styles.text}>HomeScreen</Text>

              <Button 
                title='Go To About'
                onPress={navigateTOAbout}
              />
            </View>
          )
        }




============================================ ii) Achieved Navigation using the useNavigation hook react ========================================================

Code : 

        import { View, Text, StyleSheet, Button } from 'react-native'
        import React, { useEffect } from 'react'
        import { useNavigation } from '@react-navigation/native'

        const AboutScreen = () => {

          // Now aim is to re-direct the user to the Home component using the useNavigation() react hook remaing all process will be same as the navigation prop 

          const navigation = useNavigation();


          useEffect(() => {
            console.log("About Us rendered............");
            
          })


          const navigateToHome = () => {

            //now re-direct the user to the Home screen 
            navigation.navigate('Home');     //inside the navigation object .navigate method will take the name of the screen to which you want to navigate 

          }


          return (
            <View style={styles.container}>
              <Text style={styles.text}>AboutUs</Text>

              <Button
                    title='Go To Home'

                    onPress={navigateToHome}
              />
            </View>
          )
        }


















============================================ Passing Data between Screens ========================================================

Example : we will pass the name parameter from home to about And render that name value in the about screen 

Some IMP Points when passing the data between the screens : 

                                i) Imp to remember that navigation.navigate("About", {

                                  //here mension the data that you want to transfer from the home to about or any 

                                })

                                ii) we can acess the data that is passed from one screen to the another screen using the route prop we have to destructure it and then use it in below manner 

                                    code :   // Now to access the name I have to destructure it from the 

                                                const {name} = route.params;


Code to pass the data from one screen to another : 

        navigation.navigate('About', {
          
          name: "Manoj"      // data that we are passing from the home to the about section 

        }); 




Code of how to access that data and show it in th UI : 


import { View, Text, StyleSheet, Button } from 'react-native'
import React, { useEffect } from 'react'
import { useNavigation } from '@react-navigation/native'

const AboutScreen = ({route}) => {

  // Now to access the name I have to destructure it from the 

  const {name} = route.params;             // this very important step to get the actual data after de-structuring it 

  // Now aim is to re-direct the user to the Home component using the useNavigation() react hook remaing all process will be same as the navigation prop 

  const navigation = useNavigation();


  useEffect(() => {
    console.log("About Us rendered............");
    
  })


  const navigateToHome = () => {

    //now re-direct the user to the Home screen 
    navigation.navigate('Home');     //inside the navigation object .navigate method will take the name of the screen to which you want to navigate 

  }


  return (
    <View style={styles.container}>
      <Text style={styles.text}>AboutUs {name}</Text>  // here the name that i am getting from the Home I have accessed it and shown in the UI

      <Button

            title='Go To Home'

            onPress={navigateToHome}
      />
    </View>
  )
}








// ======================================== Setting the default parameter value for any data While rendering that screen itself (Using initialParams ) ==============================

When it will be More useFull : 

                        i) suppose From Home Component screen I Do not want to transfer tha data as the name to the 
                        AboutUs Componenet From the About Screen then it should take some default value for such 
                        scenarios we will use setting the default value for that name While rendering that Screen 
                        using the initialParams


Code : (How to use it)


        <Stack.Screen name='About' component={AboutScreen} initialParams={{
          name:"Babu-Bhai"
        }}/>





//============================================= How to send the data to the same screen =================================

We Use it when : 
              When We want to send the data to the same screen then We Have to use the setParams() method which is present in the navigation 

Code : (How setParams is used)  (I have added this In the AboutScreen Component where name it was firstlly reciving Manoj)        


      <Button

          title='Update the name'

          onPress={() => {
            
            navigation.setParams({                            //here using the setParams I am sending the data to the same screen and I am also updating the same 
              name:"Manoj With React Native"
            })
          }}
      
      />
















// ==================================== Now Exploring the some of the options That Stack Navigator Supports =======================================


Learning the below concepts : 
                        i) specifying the screen title 
                        ii) styling headers 
                        iii) And setting the content styles 





i) specifying the screen title : 
                          i) Every Screen In our Stack Display A title In the header surving as a handy guide to users to 
                          understand the current location within in the App 

                          ii) By-default the name prop on the Screen Component is showcased as the screen title for 
                          instance in my applications screens it by default displays Home and About 

                          iii) We Can customize the title of the header using the below way for each screen by specifying the title options which will have the option as the prop name 

Code : (To Change the Title Of the Any Screen)

        <Stack.Screen name='Home' component={HomeScreen} options={{

          title:"Welcome Home"                 //now this title will be read by the Home Screen 

        }}/>





ii) styling headers : (Why it is necessarry read below points)


Note : 
        1) All styling options means props are the screen specific means that style  will be present for that screen only it will not get applied by-default to all the screens 
        2) So to apply the same style across the all screens we have lift all the props of the style to the stack navigator 
            using the screenOptions={{

                //here you have to mension the all the common style for all the headers of the all the screens 

            }}

    Code (To refer for giving the same style accross the multiple screen headers)        


     <Stack.Navigator initialRouteName='Home'

          screenOptions={{
            //^ giving the style to the header of the each screen 
            headerStyle:{
              backgroundColor:"red",       //it will change the background color of header of that screen
            
            },
            headerTintColor:"white",       //it will change the header text (title) color of that screen

            headerTitleStyle:{
              fontWeight:"bold"
            },

            // ^Now we have the headerLeft and headerRight options which allow adding the custom components to the left and right of the header of that particular screen 

            headerRight:() => {
              return (
                  <Pressable onPress={() => Alert.alert("Right header Button pressed")} style={{backgroundColor:"aqua" , padding:7}}>
                    <Text style={{color:"black" , fontWeight:"bold"}}>
                        Right Button
                    </Text>
                  </Pressable>
              )
            },

            headerLeft:() => {
              return(
                <Pressable onPress={() => Alert.alert("Left header Button pressed")} style={{backgroundColor:"aqua" , padding:7}}>
                <Text style={{color:"black" , fontWeight:"bold"}}>
                    Left Button
                </Text>
              </Pressable>
              )
            },

            contentStyle:{
            //  backgroundColor:"yellow",     //When you need specific styling for a screen's content area: 
            
            }
          }}
      >



=======================================   Points to remember While implementing the styling to the header of the each Screen ======================================


                  i) we have to style the header because it should get resegnate with the application theme in simple (it should get match will the application theme)

                  ii) which includes 
                            i) setting the background color 
                            ii) text color
                            iii) font weight (and other attributes)

                  iii) We can achieve the styling headers using the below code :

                  iv) we can add the custom component to the right and left of the header using the below code :

                  v) also the code to change the content style 




Code (Of one Screen to refer to understand the all above points) : 


      <Stack.Screen name='Home' component={HomeScreen} options={{

          title:"Welcome Home",                 //now this title will be read by the Home Screen 

          //^ giving the style to the header of the each screen 
          headerStyle:{
            backgroundColor:"red",       //it will change the background color of header of that screen
           
          },
          headerTintColor:"white",       //it will change the header text (title) color of that screen

          headerTitleStyle:{
            fontWeight:"bold"
          },

          // ^Now we have the headerLeft and headerRight options which allow adding the custom components to the left and right of the header of that particular screen 

          headerRight:() => {
            return (
                <Pressable onPress={() => Alert.alert("Right header Button pressed")} style={{backgroundColor:"aqua" , padding:7}}>
                  <Text style={{color:"black" , fontWeight:"bold"}}>
                      Right Button
                  </Text>
                </Pressable>
            )
          },

          headerLeft:() => {
            return(
              <Pressable onPress={() => Alert.alert("Left header Button pressed")} style={{backgroundColor:"aqua" , padding:7}}>
              <Text style={{color:"black" , fontWeight:"bold"}}>
                  Left Button
              </Text>
            </Pressable>
            )
          },

          contentStyle:{
          //  backgroundColor:"yellow",     //When you need specific styling for a screen's content area: 
           
          }

        }}/>






// ===================================================================== Dynamic Stack Navigator Options (Changing the header title dynamically) ==========================================================

Note : While creating the application we have to set the dynamically some options then We Have to use the Dynamic Stack Navigator 

      Like Example : Updating the header title dynamically of the AboutUs screen which will get updated when user will re-direct from the Home screen to the AboutUS Screen 


Below Is Implementation Code with proper Comments :

                          i) passing the name of the person as the parameter to the about us Screen so that should get visible in the AboutUs Screen header titile while redirecting from Home To AboutUs 


Total ways: (there are two ways to achieve above thing)

              1)directlly from Stack.Screen Component by passing the function to the options props  
              2) (Using the React Hook)  useLayoutEffect() hook    (This is the recommended option )


//Main Question When to use which Stack Navigator : 
                          i) use Stack.Screen options when titile or navigation options are driven by route parameters are static 
                          ii) use useLayoutEffect() hook when the navigation options depend on the screen component internal logic , state or props  or when they need to be updated post render means after render  



1)directlly from Stack.Screen Component by passing the function to the options props  

Code : 

        <Stack.Screen name='About' component={AboutScreen} 
        
        initialParams={{

          name:"Babu-Bhai"

        }}
        
        
        options={({route}) => ({

          //step 1: we have to take the options which will specifies the function and that function will return the object 

          //step 2 : that function of the options will recieve route prop from the screen which we can de-structure to access the desired parameters 
          // and use them as part of the title 


          title: route.params.name,                        // here while navigating the From Home I have to pass the name in the object form so when I will re-direct that will be shown 

        })}
        
        
        
        />


Note : (If You added the extra screen later then You are getting the errors then You have to use the below file with .ts extension )

interface.ts 

type  StackNavigatorProps = {
    Home:undefined;
    About:{
        name:string
    };
    Contact:undefined;

}

export type {StackNavigatorProps};







2) (Using the React Hook)  useLayoutEffect() hook : 

useLayoutEffect(): 
               this hook will take the two parameters 
                            i) callback functions 
                            ii) dependency list 


Note : 
      i) if you will replace useLayoutEffect() with the useEffect() then the title update show some noticable delay  which isnt the smoothest user experiance
      ii) hence prefer to use useLayoutEffect() 




Code : (How to Use the the useLayoutEffect()) : Code is there in AboutScreen.js becasue there we are reciving the name from HomeScreen Dyanamically 



  //Dynamic Stack Navigator using the useLayoutEffect() hook   
  // second way to achieve Dynamic Stack Navigator   

  useLayoutEffect(() => {
    // we will use this in the AboutUs Screen because there the name we will recieve from the HomeScreen 
    navigation.setOptions({
      //here we pass options object 

      title:name,                       //name which we have extracted from the route.params using destructuring it 

    })
  } ,  [navigation , name])   // passing the dependency is very important 











Today : 

Resolved the error issue for implementing the Navigation / connected with the Rohit For the Doubts I was having / after resoving issue created new demo app  and implemented the navigation then 
Dynamic navagation / and learned some new hooks and implemented it 









//========================================= Date : 13/11/2024 ============================================

Target : Complete the remaining 5 tutorials 

        i) Implementation Of the Drawer-Navigation 
        ii) Understanding the each thing in Navigation Why to use it and when to use it 
        iii) Tab Navigation (With Differant options)
        iv)  Nesting Navigators 








// ================================= i) Implementation Of the Drawer-Navigation  ===========================

Why and When to use Drawer-Navigation : 
                            i) Similar How Stack Navigator Stack the screen one over the other where the Drawer-Navigator 
                                introduces a hidden menue sliding from the either slide of the screen (Means it will Come from either of the one site like left or right)


                              For More details :  https://reactnavigation.org/docs/drawer-based-navigation/ 

                            ii) Mostlly it is used In Youtube where Drawer Content is Like : Home, Trending, Subscriptions, Library, Settings, Help 
                                (For this pages it get implemented the drawer navigation because that is the great approach for that usecases)

                            iii) it is particularlly benifical in apps with multiple main sections that required a neat and organized navigation structure     



How to implement the Drawer navigation steps : 

    step 1) we have to install the drawer navigation pacakge in our project (Follow the official documentation)

              Command : npm install @react-navigation/drawer


    step 2 ) then install and configure the ibraries that are required by the drawer navigator which are below 

                    i) react-native-gesture-handler
                    ii) react-native-reanimated   

              Command :npm install react-native-gesture-handler react-native-reanimated             

Note : 
    Now In My Project That I have Created the While learning There I am making the changes for the App.tsx to = AppStack.tsx 
    And For Drawer navigator I am creating the new App.tsx file where I am writing the Drawer navigation code 


    2.01 min 


    step 3) import the below things 

    import 'react-native-gesture-handler';   //!make sure it is at the top and nothing is there before it 
    import { NavigationContainer } from '@react-navigation/native';
    import { createDrawerNavigator } from '@react-navigation/drawer';


    step 4) invoke createDrawerNavigator and create the instance for the same like below 

    code : 
          const Drawer = createDrawerNavigator();



    step 4) We Have to configure Babel plugin (refer the official documentation)

            link: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/

            i) make the changes in the below file : 
                Add react-native-reanimated/plugin plugin to your babel.config.js


             Add below code : 
                          plugins: [
                            ...             //!remove this three dots IMP (because it indicates the some previous plugins that you have implemented)
                            'react-native-reanimated/plugin',
                          ], 



// ==================================== Very IMP for Any Screen =====================================

//================================== Note While Creating the any screen in the src folder follow the below structure ====

      // src directory - Main source folder for your app
      src
        â””â”€â”€ screen                   // Folder for all the screens
            â””â”€â”€ home                 // Folder for the "home" screen (lowercase)
                â”œâ”€â”€ components       // Folder for components specific to this screen
                â”‚   â”œâ”€â”€ Component1.tsx   // Component 1 for home screen
                â”‚   â”œâ”€â”€ Component2.tsx   // Component 2 for home screen
                â”‚   â””â”€â”€ ...            // More components as needed
                â”‚
                â”œâ”€â”€ home.screen.tsx    // Main UI file for the "home" screen (UI related to the screen)
                â”œâ”€â”€ home.hook.tsx      // Custom hook file specific to this screen's logic (if necessary)
                â””â”€â”€ ...                // Other files related to the "home" screen (optional)
                
        â””â”€â”€ otherScreen               // Folder for another screen (following the same structure)







// =================== Drawer Navigation To open the side drawer when user click on any particulat button then use below code ==========


Code : 

import { View, Text, Button } from 'react-native'
import React from 'react'
import Header from './components/Header'


const dashboard = ({navigation}) => {
  return (
    <View>
      <Header/>

      <Button

        title='Toggle drawer'

        onPress={() => navigation.toggleDrawer()}   //to open the drawer from the left side 

        />


      <Button

      title='Settings'

      onPress={() => navigation.jumpTo('Settings')}   //to redirect to the settings page 

      />

    </View>
  )
}

export default dashboard








// ========================================== Few Important Drawer Navigation Options (used to custmize its appearance) =============================================



Code : 

        <Drawer.Navigator>

            <Drawer.Screen name='Dashboard' component={dashboard}
            
            options={{
                title: "My dashboard",                     //this will change the header title Dashboard to  My dashboard as well as it will change the drawer label         

                drawerLabel: "Dashboard label",            // you can change the drawer label specifically title will also change but drawerLabel is prefered to change the drawer label

                drawerActiveTintColor: "#333",              // this will change the color of the text for that particular drawer 

                drawerActiveBackgroundColor: "lightblue",    // this will change the background-color of  that particular drawer 

                drawerContentStyle: {                        //this will be used for the entirelly drawer color and set the background color 
                  backgroundColor: "#c6cbef",
                },
            }}
            
            
            />



profile and courselist 



//================================================================ iii) Tab Navigation (With Differant options)  ==============================================
it will add the bottom navigation in our application 

When and How it is used : 
                        i) Tab Navigation offers a way to switch between differant screens by tapping on a tab which is usually displayed at the bottom of the screen 

                        ii) it is a common and intuitive navigation pattern found in many apps , providing a seamless , user-friendlly experiance  


Step sto use the Tab Navigation In App : 

step 1) install the Bottom Tabs Navigator library in project 

        command : npm install @react-navigation/bottom-tabs


step 2) import the below things

        import { NavigationContainer } from '@react-navigation/native'
      import { createBottomTabNavigator } from '@react-navigation/bottom-tabs'

step 3) invoke the function and create the instance of the createBottomTabNavigator  like below     

        Code : const Tab = createBottomTabNavigator();


step 4) Entire code on the Implementation of the tab navigation in react native is below 

Code : 


      import { NavigationContainer } from '@react-navigation/native'
      import { createBottomTabNavigator } from '@react-navigation/bottom-tabs'


      import { View, Text } from 'react-native'
      import React from 'react'
      import course_list from './src/screens/course_list/course_list.screen';
      import profile from './src/screens/profile/profile.screen';
      import setting from './src/screens/setting/setting.screen';

      const Tab = createBottomTabNavigator();

      const App = () => {
        return (
          <NavigationContainer>
              <Tab.Navigator>
                  <Tab.Screen name='Course List' component={course_list}/>
                  <Tab.Screen name='Profile' component={profile}/>
                  <Tab.Screen name='Settings' component={setting}/>
              </Tab.Navigator>
          </NavigationContainer>
        )
      }

      export default App






Points to remember while implementing the Tab Navigator : 

                i) <Tab.Screen name='Course List' component={course_list}/> 
                      from the above name prop will by-default it will displayed at two positions 
                                          1) first as the label that we can see to wards bottom of our application 
                                          2) as well as title in the header








// ================ Tab.Navigator screenOptions (We Can style the Tab Navigation using it all childrens will get all those propeties applied ) ==================================


Code : 

        <Tab.Navigator 
            screenOptions={{
                // tabBarLabelPosition:"beside-icon"   //by default it will be below icons which represent the name should display where in differant divices like tab and mobile it differs 
                
                tabBarLabelPosition:"below-icon",

                //tabBarShowLabel:false                //this will handle whether the to display the label or not label means that name only 
                
                tabBarShowLabel:true,

                tabBarActiveTintColor:"red",              //which sets the active tab label font color 

                tabBarInactiveTintColor:"purple"            // this color will get apply to the labels which are currentlly in-active on our application 
                
            }}
        >





// ==================================== Each Tab Navigation Options =========================== 

Refer the below code it is self Explainatory: 

Code : 

                <Tab.Screen name='Profile' component={profile}

                    options={{
                        tabBarLabel: "My Profile",                      //!this will only change the label name of that tab navigation 

                         tabBarIcon: () => <Image source={googleIcon}  style={styles.image} resizeMode="contain"/>,

                        tabBarBadge: 3,                                  //!this will be used in the terms like we have to show the notification count then we can use it 

                    }}

                />


Note : For Tab navigation we have the multiple options to implement it can be implemented according to the user requirements 




                        <View style={styles.labelContainer}>

                          <View style={styles.subContainer1}>
                            <SubscriptionIcon/>
                            <Text style={styles.labelText}>Subscription</Text>
                          </View>

                          <View style={styles.subContainer2}>
                            <DrawerNextIcon style={styles.nextIcon} width={40} height={40}/>
                          </View>

                          
                        </View>



// =================================================== Nesting Navigators ===================================================

refer the App.tsx file where I have done the nesting navigation 

When And How it is used : 
                  i) Nesting Navigators allows us to combine the powers of differant types of navigators , creating a seamless and organized user experiance 

                  ii) its like having the main road with smaller branching lanes , each having its own set of rules yet interconnected 

How I implemented the nesting navigator : 

      1) In My Project I am nesting the Stack Navigator within the Tab Navigator 

      2) We are going to re-use the navigators that we already created 

    Chnages That I have done : 
                    i) make small change in the AppStack.tsx file which contains our stack navigator 

                 
issues that we get while implementing the nesting navigation : 
                      i) the two-two headers with differant title of the each screnn get display 
                              i) 1st header from the each navigator and 2nd also of the tab navigator 

                      how to handle the multiple headers in our App : 
                               i) we can use  below code : 

                 Code : 
                              {/* Creating the new Screen for doing the nesting navigation  */}
                              {/* Thats It I have successfully implemented the nested navigation between the Stack And Tab Navigation  */}

                              <Tab.Screen name='About Stack' component={AboutStack} options={{
                                  
                                  headerShown:false                // this will hide the current tab navigation header and we will get to display the Stack Navigation header 

                              }}/>              




Note : 
      While implementing the Nested Navigation according the requirements we have to prefer which and how to use it
      becasue it might get complex while implementing in depth  




//=============================== Done With All the tutorials With Proper understanding just more practice is needed =================




//====================================== Now Starting the new journey of implementing the projects In React Native ===============

figma design link : https://www.figma.com/design/W8zXVHdkstQ4FppWXqJT24/Sample-1411?node-id=0-1&node-type=canvas&t=ItibAPtDuUx1qopw-0


Tommarow : (Entire Project Is Static Only)

        1) start with the project implementing the navigation first then rendering the content step by step 
        2) set up the my git account in my laptop itself with gitHub 


I have to refer the below code for implementing the drawer navigation 

        const Tile = ({ leftIcom, rightIcom, text, LeftPress, RightPress }: { text: string, leftIcom: React.ReactNode, rightIcom: React.ReactNode, LeftPress: () => void, RightPress: () => void }) => {
    return (
        <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginHorizontal: 6 }}>
            <View style={{ flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'center' }}>
                <Pressable onPress={LeftPress}>
                    {leftIcom}
                </Pressable>
                <Text>{text}</Text>
            </View>
            <Pressable onPress={RightPress}>
                {rightIcom}
            </Pressable>
        </View>
    )
}
<Tile  />



//=========== For Images We use the below library =======================

https://www.npmjs.com/package/react-native-fast-image


Start implementing :

Stack -> drawer ->bottom



// ================================= How to use the TouchableOpacity In Code ===================================

  return (
    <TouchableOpacity style={styles.button} onPress={handlePress}>
      <Text style={styles.buttonText}>Press Me</Text>
    </TouchableOpacity>
  );


const styles = StyleSheet.create({
  button: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
});



//Tommarow : 19/11/2024

going through the nested routing (watch the tutorials)
resolving the issue by my-self 
then also not getting resolved then connect the rohit 
create the design of the drawer navigation 

// ================================== For Displaying the SVG images icons in React Native ============================================

step 1 ) install the one pacakage 

    command:    npm install react-native-svg


step 2) We have to use one online tool that will convert the svg image code into the react native Componenet

link of tool : https://www.svgviewer.dev/svg-to-react-native-jsx

Note : 
      i) (While Converting the svg select the react native )
      ii) then use this version of t he react-native-svg = "react-native-svg": "^14.1.0"
      












//================================ Things While Applying the Style In React Native ====================================


  container: {
    //for main parent do not give the flex : 1 then it will take the entire width also height 
    flexDirection:"row",
    justifyContent:"space-between",
    marginTop:10,
    backgroundColor: 'white',
    
  },
  helloContainer:{
    flexDirection:"row",
    justifyContent:"space-evenlly",
    alignItems: 'center',
    // backgroundColor: 'red',
    width: '75%',                     //Arrange the width how much each child should take 
    height: 80, // Set height (optional)
    
  },
  bellDrawerNav:{

    flexDirection:"row",
    justifyContent:"space-around",
    alignItems: 'center',
    // backgroundColor: 'yellow',
    height: 80, // Set height (optional)
    width: '25%',

  },



// project Drawer Navigation Screens I need to create 
subscription
verification
legal-documents 
transaction-history
contact-us 
about-us
delete-account
logout

Doubts : 
naming of the screen Convertion 

somewhere you created 
      register-screen.tsx and register.screen.tsx   ( which one to prefer )





//Note :  for the React Native Navigation prefer the below dependencies if getting the some issue then I have to see the Quicknest project 


"@react-navigation/bottom-tabs": "^6.5.12",
    "@react-navigation/drawer": "^6.6.2",
    "@react-navigation/material-top-tabs": "^6.6.14",
    "@react-navigation/native": "^6.1.10",
    "@react-navigation/native-stack": "^6.9.25",
    "@react-navigation/stack": "^6.3.21",

























All Doubts I Got While Learning React-Native  :

1) means Sir this react native components are having separate inbuild components for displaying the Ui elements right ?
2) sir how to get the element that is triggered in the react native 
3) TO sir ask about the box shadow link that he is going to share date : 05/11/2024



//================================================= Doubts date : 07/11/2024  ======================================================

4) is we write the components for the differant platform like ios and android with specific platform file extensions  ? 



If Doubts i have to connect with the following peoples: 
              i) Gaurav Sir 
              ii) One More Who Works Remotelly (Rohit Aware)




// ======================== Doubts date : 14/11/2024 ===========================

1) While installing the any package from the official documentation I have to install it via npm or pnpm (prefer which and for why ?)


2) My header content in the Drawer navigation =for each screen is not visible (What can be the issue)







